{"version":3,"sources":["../../src/nextjs/server-action-write-adapter.ts","../../src/nextjs/chat-adapter.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-floating-promises */\n/* eslint-disable @typescript-eslint/no-unnecessary-condition */\n/* eslint-disable no-constant-condition */\nimport { type StreamableValue, createStreamableValue } from \"ai/rsc\";\n\nexport const createServerActionStream = (\n  stream: ReadableStream<string>\n): StreamableValue<string> => {\n  const streamableValue = createStreamableValue(\"\");\n\n  const reader = stream.getReader();\n\n  (async () => {\n    try {\n      while (true) {\n        const { done, value } = await reader.read();\n        if (done) break;\n\n        if (typeof value === \"string\") {\n          streamableValue.update(value);\n        }\n      }\n      streamableValue.done();\n    } catch (error) {\n      console.error(\"Error while reading stream:\", error);\n      streamableValue.error(\"An error occurred while processing the stream\");\n    }\n  })();\n\n  return streamableValue.value;\n};\n","import type { JSONValue } from \"ai\";\nimport { LangChainAdapter, StreamData, StreamingTextResponse } from \"ai\";\n\n/**\n * Converts a ReadableStream response from the chat() function into a StreamingTextResponse\n * suitable for use with the ai-sdk's useChat Next.js hook.\n *\n * @param response - The response object containing:\n *   - output: A ReadableStream of LangChainAIMessageChunk from the chat function.\n *   - isStream: A boolean indicating if the response is a stream.\n * @returns StreamingTextResponse - The adapted response for use with the useChat hook.\n */\nexport const aiUseChatAdapter = (\n  response: { output: ReadableStream<string>; isStream: true },\n  metadata?: JSONValue\n) => {\n  const streamData = new StreamData();\n\n  const wrappedStream = LangChainAdapter.toAIStream(response.output, {\n    onStart() {\n      if (metadata) {\n        streamData.append(metadata);\n      }\n    },\n    onFinal() {\n      void streamData.close();\n    },\n  });\n  return new StreamingTextResponse(wrappedStream, {}, streamData);\n};\n"],"mappings":";AAGA,SAA+B,6BAA6B;AAErD,IAAM,2BAA2B,CACtC,WAC4B;AAC5B,QAAM,kBAAkB,sBAAsB,EAAE;AAEhD,QAAM,SAAS,OAAO,UAAU;AAEhC,GAAC,YAAY;AACX,QAAI;AACF,aAAO,MAAM;AACX,cAAM,EAAE,MAAM,MAAM,IAAI,MAAM,OAAO,KAAK;AAC1C,YAAI,KAAM;AAEV,YAAI,OAAO,UAAU,UAAU;AAC7B,0BAAgB,OAAO,KAAK;AAAA,QAC9B;AAAA,MACF;AACA,sBAAgB,KAAK;AAAA,IACvB,SAAS,OAAO;AACd,cAAQ,MAAM,+BAA+B,KAAK;AAClD,sBAAgB,MAAM,+CAA+C;AAAA,IACvE;AAAA,EACF,GAAG;AAEH,SAAO,gBAAgB;AACzB;;;AC7BA,SAAS,kBAAkB,YAAY,6BAA6B;AAW7D,IAAM,mBAAmB,CAC9B,UACA,aACG;AACH,QAAM,aAAa,IAAI,WAAW;AAElC,QAAM,gBAAgB,iBAAiB,WAAW,SAAS,QAAQ;AAAA,IACjE,UAAU;AACR,UAAI,UAAU;AACZ,mBAAW,OAAO,QAAQ;AAAA,MAC5B;AAAA,IACF;AAAA,IACA,UAAU;AACR,WAAK,WAAW,MAAM;AAAA,IACxB;AAAA,EACF,CAAC;AACD,SAAO,IAAI,sBAAsB,eAAe,CAAC,GAAG,UAAU;AAChE;","names":[]}